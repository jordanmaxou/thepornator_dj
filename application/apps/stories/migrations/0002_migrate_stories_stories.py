# Generated by Django 5.1 on 2024-11-04 08:54

from django.db import migrations
from apps.migration.utils import fetch_data_from_mysql


def create_tags_func(apps, _schema_editor):
    Tag = apps.get_model("stories", "Tag")
    stories = fetch_data_from_mysql("porn_story")
    tags = []
    for story in stories:
        if story.tagsEN != "Birth, Cuckold, Hospital":
            current_tags = zip(
                [t.strip() for t in story.tagsEN.split(",")],
                [t.strip() for t in story.tagsFR.split(",")],
            )
        else:
            current_tags = zip(
                [t.strip() for t in ["Birth", "Hospital", "Cuckold"]],
                [t.strip() for t in story.tagsFR.split(",")],
            )
        tags.extend(list(current_tags))
    tag_objs = []
    for tag in list(set(tags)):
        tag_objs.append(
            Tag(
                name=tag[0],
                name_en=tag[0],
                name_fr=tag[1],
            )
        )
    Tag.objects.bulk_create(tag_objs)


def delete_tags_func(apps, _schema_editor):
    Tag = apps.get_model("stories", "Tag")
    stories = fetch_data_from_mysql("porn_story")
    tags = set()
    for story in stories:
        tags.union(set([t.strip() for t in story.tagsEN.split(",")]))
    Tag.objects.filter(name__in=list(tags)).delete()


def create_stories_func(apps, _schema_editor):
    Story = apps.get_model("stories", "Story")
    stories = fetch_data_from_mysql("porn_story")
    story_objs = []
    for story in stories:
        story_objs.append(
            Story(
                id=story.id,
                slug=story.slug,
                title=story.titleEN,
                title_en=story.titleEN,
                title_fr=story.titleFR,
                content=story.contentEN.decode(),
                content_en=story.contentEN.decode(),
                content_fr=story.contentFR.decode(),
                publication_date=story.publicationdate,
                thumb=story.thumb,
                author=story.author,
            )
        )
    Story.objects.bulk_create(story_objs)


def delete_stories_func(apps, _schema_editor):
    Story = apps.get_model("stories", "Story")
    stories = fetch_data_from_mysql("porn_story")
    Story.objects.filter(id__in=[r.id for r in stories]).delete()


def create_story_tag(apps, _schema_editor):
    Tag = apps.get_model("stories", "Tag")
    StoryTag = apps.get_model("stories", "Story").tags.through
    stories = fetch_data_from_mysql("porn_story")
    tags_map = {t.name: t.id for t in Tag.objects.all()}
    story_tag_objs = []
    for story in stories:
        tags = [t.strip() for t in story.tagsEN.split(",")]
        for tag in tags:
            story_tag_objs.append(StoryTag(story_id=story.id, tag_id=tags_map[tag]))
    StoryTag.objects.bulk_create(story_tag_objs)


def delete_story_tag(apps, _schema_editor):
    StoryTag = apps.get_model("stories", "Story").tags.through
    stories = fetch_data_from_mysql("porn_story")
    StoryTag.objects.filter(story_id__in=[r.id for r in stories]).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("stories", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_tags_func, delete_tags_func),
        migrations.RunPython(create_stories_func, delete_stories_func),
        migrations.RunPython(create_story_tag, delete_story_tag),
    ]
