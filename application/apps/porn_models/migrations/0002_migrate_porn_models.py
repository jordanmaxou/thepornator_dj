# Generated by Django 5.1 on 2024-11-03 18:52

from django.db import migrations
from apps.migration.utils import fetch_data_from_mysql
from os.path import join
from urllib.parse import urljoin


def model_url(website, profile_slug) -> str:
    if website["slug"] == "manyvids":
        slug = profile_slug.split("___")
        if len(slug) == 2:
            return f"https://www.manyvids.com/Profile/{slug[0]}/{slug[1].lower()}/Store/Videos"
    return urljoin(website["slug"], profile_slug)


def create_categories_func(apps, _schema_editor):
    Category = apps.get_model("porn_models", "Category")

    category_objects = []
    categories = fetch_data_from_mysql("porn_modelcategory")
    for category in categories:
        category_objects.append(
            Category(
                slug=category.slug,
                name=category.nameEN,
                name_en=category.nameEN,
                name_fr=category.nameFR,
            )
        )
    Category.objects.bulk_create(category_objects)


def delete_categories_func(apps, _schema_editor):
    Category = apps.get_model("porn_models", "Category")
    Category.objects.all().delete()


def update_category_with_main_content(apps, _schema_editor):
    Profile = apps.get_model("porn_models", "Profile")
    Category = apps.get_model("porn_models", "Category")
    for category in Category.objects.all():
        main_profile = Profile.objects.filter(
            categories=category,
        ).first()
        category.main_profile_id = main_profile.id if main_profile else None
        category.save()


def update_category_main_contents_to_none(apps, _schema_editor):
    Category = apps.get_model("porn_models", "Category")
    for category in Category.objects.all():
        category.main_profile = None
        category.save()


def create_websites_func(apps, _schema_editor):
    Website = apps.get_model("porn_models", "Website")
    website_objs = []
    websites = fetch_data_from_mysql("porn_modelsite")
    for website in websites:
        website_objs.append(
            Website(
                slug=website.slug,
                name=website.name,
                url=website.url,
                image=join("img/logomodelsites", f"{website.slug}.webp"),
            )
        )
    Website.objects.bulk_create(website_objs)


def delete_websites_func(apps, _schema_editor):
    Website = apps.get_model("porn_models", "Website")
    Website.objects.all().delete()


def create_profile_func(apps, _schema_editor):
    Profile = apps.get_model("porn_models", "Profile")
    Count = apps.get_model("porn_models", "Count")
    Category = apps.get_model("porn_models", "Category")
    Website = apps.get_model("porn_models", "Website")

    websites_from_remote_id_slug = {
        row.id: row.slug for row in fetch_data_from_mysql("porn_modelsite")
    }
    websites_from_local = {
        row["slug"]: {"id": row["id"], "url": row["url"], "slug": row["slug"]}
        for row in Website.objects.values("id", "slug", "url")
    }

    profiles = fetch_data_from_mysql("porn_modelprofile")
    counts = Count.objects.bulk_create(
        [
            Count(
                clicks=profile.click or 0,
                likes=profile.nblikes or 0,
                photos=profile.nbphotos or 0,
                videos=profile.nbvideos or 0,
                posts=profile.nbposts or 0,
            )
            for profile in profiles
        ]
    )
    for i, profile in enumerate(profiles):
        website = websites_from_local.get(
            websites_from_remote_id_slug.get(
                profile.modelsite_id if profile.modelsite_id < 10 else 1
            )
        )
        Profile.objects.create(
            slug=profile.slug,
            pseudo=profile.pseudo,
            photo=profile.photo,
            description=profile.description,
            price=profile.price,
            counts_id=counts[i].id,
            website_id=website["id"],
            local_photo=join("img/photomodels", f"{profile.slug}.jpg"),
            url=model_url(website, profile.slug),
            status=1,
        )

    profiles_remote_id_slug = {row.id: row.slug for row in profiles}
    profiles_local_slug_id = {
        row["slug"]: row["id"] for row in Profile.objects.values("id", "slug")
    }
    profiles_map_remote_local_id = {
        id: profiles_local_slug_id.get(slug)
        for id, slug in profiles_remote_id_slug.items()
    }

    categories = fetch_data_from_mysql("porn_modelcategory")
    categories_remote_id_slug = {row.id: row.slug for row in categories}
    categories_local_slug_id = {
        row["slug"]: row["id"] for row in Category.objects.values("id", "slug")
    }
    categories_map_remote_local_id = {
        id: categories_local_slug_id.get(slug)
        for id, slug in categories_remote_id_slug.items()
    }
    profiles_categories = [
        Profile.categories.through(
            **{
                "profile_id": profiles_map_remote_local_id.get(row.profile_id),
                "category_id": categories_map_remote_local_id.get(row.category_id),
            }
        )
        for row in fetch_data_from_mysql("porn_modelprofilecategory")
    ]
    Profile.categories.through.objects.bulk_create(
        profiles_categories, ignore_conflicts=True
    )


def delete_profile_func(apps, _schema_editor):
    Profile = apps.get_model("porn_models", "Profile")
    Profile.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("porn_models", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_websites_func, delete_websites_func, atomic=True),
        migrations.RunPython(
            create_categories_func, delete_categories_func, atomic=True
        ),
        migrations.RunPython(create_profile_func, delete_profile_func, atomic=True),
        migrations.RunPython(
            update_category_with_main_content,
            update_category_main_contents_to_none,
            atomic=True,
        ),
    ]
