# Generated by Django 5.1 on 2024-11-03 18:52

from collections import defaultdict
from django.db import migrations
from apps.migration.utils import fetch_data_from_mysql
from os.path import join
from urllib.parse import urljoin


def model_url(website, profile_slug) -> str:
    if website.slug == "manyvids":
        slug = profile_slug.split("___")
        if len(slug) == 2:
            return f"https://www.manyvids.com/Profile/{slug[0]}/{slug[1].lower()}/Store/Videos"
    return urljoin(website.url, profile_slug)


def create_categories_func(apps, _schema_editor):
    Category = apps.get_model("porn_models", "Category")

    category_objects = []
    categories = fetch_data_from_mysql("porn_modelcategory")
    for category in categories:
        category_objects.append(
            Category(
                id=category.id,
                slug=category.slug,
                name=category.nameEN,
                name_en=category.nameEN,
                name_fr=category.nameFR,
            )
        )
    Category.objects.bulk_create(category_objects)


def delete_categories_func(apps, _schema_editor):
    Category = apps.get_model("porn_models", "Category")
    categories = fetch_data_from_mysql("porn_modelcategory")
    Category.objects.filter(id__in=[r.id for r in categories]).delete()


def update_category_with_main_content(apps, _schema_editor):
    Profile = apps.get_model("porn_models", "Profile")
    Category = apps.get_model("porn_models", "Category")
    for category in Category.objects.all():
        main_profile = Profile.objects.filter(
            categories=category,
        ).first()
        category.main_profile_id = main_profile.id if main_profile else None
        category.save()


def update_category_main_contents_to_none(apps, _schema_editor):
    Category = apps.get_model("porn_models", "Category")
    for category in Category.objects.all():
        category.main_profile = None
        category.save()


def create_websites_func(apps, _schema_editor):
    Website = apps.get_model("porn_models", "Website")
    website_objs = []
    websites = fetch_data_from_mysql("porn_modelsite")
    for website in websites:
        website_objs.append(
            Website(
                id=website.id,
                slug=website.slug,
                name=website.name,
                url=website.url,
                image=join("img/logomodelsites", f"{website.slug}.webp"),
            )
        )
    Website.objects.bulk_create(website_objs)


def delete_websites_func(apps, _schema_editor):
    Website = apps.get_model("porn_models", "Website")
    websites = fetch_data_from_mysql("porn_modelsite")
    Website.objects.filter(id__in=[r.id for r in websites]).delete()


def create_profile_func(apps, _schema_editor):
    Profile = apps.get_model("porn_models", "Profile")
    Count = apps.get_model("porn_models", "Count")
    Category = apps.get_model("porn_models", "Category")
    Website = apps.get_model("porn_models", "Website")

    profile_category_relations = fetch_data_from_mysql("porn_modelprofilecategory")
    profile_category_map = defaultdict(list)
    for profile_id, category_id in profile_category_relations:
        profile_category_map[profile_id].append(category_id)

    profiles = fetch_data_from_mysql("porn_modelprofile")
    for profile in profiles:
        website = Website.objects.get(
            id=profile.modelsite_id if profile.modelsite_id < 10 else 1
        )
        count_obj = Count.objects.create(
            clicks=profile.click or 0,
            likes=profile.nblikes or 0,
            photos=profile.nbphotos or 0,
            videos=profile.nbvideos or 0,
            posts=profile.nbposts or 0,
        )
        profile_obj = Profile.objects.create(
            id=profile.id,
            slug=profile.slug,
            pseudo=profile.pseudo,
            photo=profile.photo,
            description=profile.description,
            price=profile.price,
            counts=count_obj,
            website_id=website.id,
            local_photo=join("img/photomodels", f"{profile.slug}.jpg"),
            url=model_url(website, profile.slug),
        )
        for category_id in profile_category_map.get(profile_obj.id, []):
            profile_obj.categories.add(Category.objects.get(id=category_id))


def delete_profile_func(apps, _schema_editor):
    Profile = apps.get_model("porn_models", "Profile")
    ProfileCategory = Profile.categories.through
    profiles = fetch_data_from_mysql("porn_modelprofile")
    profile_ids = [p.id for p in profiles]
    Profile.objects.filter(id__in=profile_ids).delete()
    ProfileCategory.objects.filter(profile_id__in=profile_ids).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("porn_models", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_websites_func, delete_websites_func, atomic=True),
        migrations.RunPython(
            create_categories_func, delete_categories_func, atomic=True
        ),
        migrations.RunPython(create_profile_func, delete_profile_func, atomic=True),
        migrations.RunPython(
            update_category_with_main_content,
            update_category_main_contents_to_none,
            atomic=True,
        ),
    ]
