# Generated by Django 5.1 on 2024-11-03 16:29

from collections import defaultdict

from django.db import migrations
from apps.migration.utils import fetch_data_from_mysql
from os.path import join


def create_categories_func(apps, _schema_editor):
    Category = apps.get_model("ai_pictures", "Category")

    category_objects = []
    categories = fetch_data_from_mysql("porn_aicategory")
    for category in categories:
        category_objects.append(
            Category(
                id=category.id,
                slug=category.slug,
                name=category.nameen,
                name_en=category.nameen,
                name_fr=category.namefr,
            )
        )
    Category.objects.bulk_create(category_objects)


def delete_categories_func(apps, _schema_editor):
    Category = apps.get_model("ai_pictures", "Category")
    categories = fetch_data_from_mysql("porn_aicategory")
    Category.objects.filter(id__in=[r.id for r in categories]).delete()


def create_countries_func(apps, _schema_editor):
    Country = apps.get_model("ai_pictures", "Country")
    country_objects = []
    countries = fetch_data_from_mysql("porn_country")
    for country in countries:
        country_objects.append(
            Country(
                id=country.id,
                slug=country.slug,
                name=country.nameen,
                name_en=country.nameen,
                name_fr=country.namefr,
                icon=country.svg_code,
            )
        )
    Country.objects.bulk_create(country_objects)


def delete_countries_func(apps, _schema_editor):
    Country = apps.get_model("ai_pictures", "Country")
    countries = fetch_data_from_mysql("porn_country")
    Country.objects.filter(id__in=[r.id for r in countries]).delete()


def get_extension_from_source(source: str, type: str) -> str:
    match source:
        case "pornjourney" | "donporn" | "candyai":
            return "png"
        case "pornmake" | "pornworks" | "pornworksai" | "createporn":
            if source in ["pornworks", "pornworksai"] and type == "video":
                return "webm"
            return "webp"
        case "deepmodeai":
            return "jpeg"
        case _:
            return "jpg"


def create_content_func(apps, _schema_editor):
    Website = apps.get_model("websites", "Website")
    Content = apps.get_model("ai_pictures", "Content")
    Note = apps.get_model("ai_pictures", "Note")
    Country = apps.get_model("ai_pictures", "Country")
    Category = apps.get_model("ai_pictures", "Category")
    content_category_relations = fetch_data_from_mysql("porn_aicontentcategory")
    content_category_map = defaultdict(list)
    for aicategory_id, aicontent_id in content_category_relations:
        content_category_map[aicontent_id].append(aicategory_id)
    content_category_map = dict(content_category_map)

    contents = fetch_data_from_mysql("porn_aicontent")
    for content in contents:
        note = Note.objects.create(
            funny=content.funny, sexy=content.sexy, scary=content.scary
        )
        content = Content.objects.create(
            id=content.id,
            title=content.titleEN,
            title_en=content.titleEN,
            title_fr=content.titleFR,
            type=content.type,
            code=content.code,
            publication_date=content.publicationdate,
            note=note,
            source=Website.objects.filter(
                slug=content.source if content.source != "pornworks" else "pornworksai"
            ).first(),
            image=join(
                "img/aicontent" if content.type == "image" else "video/aicontent",
                f"{content.code}.{get_extension_from_source(content.source, content.type)}",
            ),
            country=Country.objects.get(id=content.country_id)
            if content.country_id
            else None,
        )
        for aicategory_id in content_category_map.get(content.id, []):
            content.categories.add(Category.objects.get(id=aicategory_id))


def delete_content_func(apps, _schema_editor):
    Content = apps.get_model("ai_pictures", "Content")
    contents = fetch_data_from_mysql("porn_aicontent")
    content_ids = [r.id for r in contents]
    Content.objects.filter(id__in=content_ids).delete()
    ContentCategory = Content.categories.through
    ContentCategory.objects.filter(content_id__in=content_ids).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("ai_pictures", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_categories_func, delete_categories_func),
        migrations.RunPython(create_countries_func, delete_countries_func),
        migrations.RunPython(create_content_func, delete_content_func),
    ]
