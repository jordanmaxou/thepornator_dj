services:
  reverse-proxy:
    image: traefik:v3.1
    restart: always
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./devops/reverse-proxy/development/config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./devops/reverse-proxy/development/config/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./devops/reverse-proxy/development/certs:/etc/certs:ro
    networks:
      - pornator

  statics-serve:
    build:
      dockerfile: ../devops/docker/dockerfiles/statics-serve.Dockerfile
      context: ./statics/
      target: serve
    networks:
      - pornator
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.statics.rule=Host(`www.pornator.localhost`) && PathPrefix(`/statics`)"
      - "traefik.http.routers.statics.entrypoints=https"
      - "traefik.http.routers.statics.tls=true"
      - "traefik.http.services.statics.loadbalancer.server.port=80"
      - "traefik.http.middlewares.strip-statics-prefix.stripprefix.prefixes=/statics"
      - "traefik.http.routers.statics.middlewares=strip-statics-prefix"
    volumes:
      - ./statics/dist:/usr/share/nginx/html:ro

  statics-processor:
    build: 
      dockerfile: ../devops/docker/dockerfiles/statics-processor.Dockerfile
      context: ./statics/
    volumes:
      - ./statics:/home/node

  medias:
    image: quay.io/minio/minio:RELEASE.2024-10-13T13-34-11Z
    restart: always
    command: minio server /data --console-address 0.0.0.0:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - pornator
    volumes:
      - 'minio:/data'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-admin.rule=Host(`minio-admin.pornator.localhost`)"
      - "traefik.http.routers.minio-admin.entrypoints=https"
      - "traefik.http.routers.minio-admin.tls=true"
      - "traefik.http.services.minio-admin.loadbalancer.server.port=9001"
      - "traefik.http.routers.minio-admin.service=minio-admin"
      - "traefik.http.routers.minio.rule=Host(`www.pornator.localhost`) && PathPrefix(`/assets`)"
      - "traefik.http.routers.minio.entrypoints=https"
      - "traefik.http.routers.minio.tls=true"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.middlewares.replace-prefix.replacepathregex.regex=^/assets/(.*)"
      - "traefik.http.middlewares.replace-prefix.replacepathregex.replacement=/pornator/$$1"
      - "traefik.http.routers.minio.middlewares=replace-prefix"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: &build
      dockerfile: ../devops/docker/dockerfiles/Dockerfile
      context: ./application/
      target: development
    init: true
    command: runserver
    restart: always
    volumes:
      - ./application:/home
    environment: &environment
      DEBUG: "True"
      ALLOWED_HOSTS: "*"
      MEDIA_URL: "assets/"
      STATIC_URL: "statics/"
      APP_DATABASE_HOST: db
      APP_DATABASE_PORT: 5432
      APP_DATABASE_NAME: pornator
      APP_DATABASE_USER: ${POSTGRES_USER}
      APP_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      MINIO_ENDPOINT_URL: http://medias:9000
      MINIO_BUCKET_NAME: pornator
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: False
    depends_on:
      - init-app
      - statics-serve
      - medias
    networks:
      - pornator
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`www.pornator.localhost`)"
      - "traefik.http.routers.backend.entrypoints=https"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.priority=1"
      - "traefik.http.services.backend.loadbalancer.server.port=80"
  
  init-app:
    build:
      <<: *build
    environment:
      <<: *environment
    networks:
      - pornator
    restart: on-failure
    command: init
    depends_on:
      - db

  db:
    image: postgres:13
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: pornator
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - pornator
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d pornator"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  postgres: {}
  minio: {}

networks:
  pornator:
    name: pornator
